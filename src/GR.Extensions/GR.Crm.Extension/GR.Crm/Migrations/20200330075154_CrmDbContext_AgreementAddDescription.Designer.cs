// <auto-generated />
using System;
using GR.Crm.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace GR.Crm.Migrations
{
    [DbContext(typeof(CrmDbContext))]
    [Migration("20200330075154_CrmDbContext_AgreementAddDescription")]
    partial class CrmDbContext_AgreementAddDescription
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Crm")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("GR.Audit.Abstractions.Models.TrackAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("DatabaseContextName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("RecordId");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("TrackEventType");

                    b.Property<string>("TypeFullName");

                    b.Property<string>("UserName");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("TrackAudits");
                });

            modelBuilder.Entity("GR.Audit.Abstractions.Models.TrackAuditDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("PropertyName");

                    b.Property<string>("PropertyType");

                    b.Property<Guid?>("TenantId");

                    b.Property<Guid>("TrackAuditId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("TrackAuditId");

                    b.ToTable("TrackAuditDetails");
                });

            modelBuilder.Entity("GR.Crm.Abstractions.Models.Currency", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DecimalDigits");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("NativeSymbol")
                        .IsRequired();

                    b.Property<string>("PluralName");

                    b.Property<decimal>("Rounding");

                    b.Property<string>("Symbol")
                        .IsRequired();

                    b.HasKey("Code");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Code = "USD",
                            DecimalDigits = 0,
                            Name = "US Dollar",
                            NativeSymbol = "$",
                            Rounding = 0m,
                            Symbol = "$"
                        },
                        new
                        {
                            Code = "CAD",
                            DecimalDigits = 0,
                            Name = "Canadian Dollar",
                            NativeSymbol = "$",
                            PluralName = "Canadian dollars",
                            Rounding = 0m,
                            Symbol = "CA$"
                        },
                        new
                        {
                            Code = "EUR",
                            DecimalDigits = 0,
                            Name = "Euro",
                            NativeSymbol = "€",
                            PluralName = "euros",
                            Rounding = 0m,
                            Symbol = "€"
                        },
                        new
                        {
                            Code = "AED",
                            DecimalDigits = 0,
                            Name = "United Arab Emirates Dirham",
                            NativeSymbol = "د.إ.‏",
                            PluralName = "UAE dirhams",
                            Rounding = 0m,
                            Symbol = "AED"
                        },
                        new
                        {
                            Code = "AFN",
                            DecimalDigits = 0,
                            Name = "Afghan Afghani",
                            NativeSymbol = "؋",
                            PluralName = "Afghan Afghanis",
                            Rounding = 0m,
                            Symbol = "Af"
                        },
                        new
                        {
                            Code = "ALL",
                            DecimalDigits = 0,
                            Name = "Albanian Lek",
                            NativeSymbol = "Lek",
                            PluralName = "Albanian lekë",
                            Rounding = 0m,
                            Symbol = "ALL"
                        },
                        new
                        {
                            Code = "AMD",
                            DecimalDigits = 0,
                            Name = "Armenian Dram",
                            NativeSymbol = "դր.",
                            PluralName = "Armenian drams",
                            Rounding = 0m,
                            Symbol = "AMD"
                        },
                        new
                        {
                            Code = "ARS",
                            DecimalDigits = 0,
                            Name = "Argentine Peso",
                            NativeSymbol = "$",
                            PluralName = "Argentine pesos",
                            Rounding = 0m,
                            Symbol = "AR$"
                        },
                        new
                        {
                            Code = "AUD",
                            DecimalDigits = 0,
                            Name = "Australian Dollar",
                            NativeSymbol = "$",
                            PluralName = "Australian dollars",
                            Rounding = 0m,
                            Symbol = "AU$"
                        },
                        new
                        {
                            Code = "AZN",
                            DecimalDigits = 0,
                            Name = "Azerbaijani Manat",
                            NativeSymbol = "ман.",
                            PluralName = "Azerbaijani manats",
                            Rounding = 0m,
                            Symbol = "man."
                        },
                        new
                        {
                            Code = "BAM",
                            DecimalDigits = 0,
                            Name = "Bosnia-Herzegovina Convertible Mark",
                            NativeSymbol = "KM",
                            PluralName = "Bosnia-Herzegovina convertible marks",
                            Rounding = 0m,
                            Symbol = "KM"
                        },
                        new
                        {
                            Code = "BDT",
                            DecimalDigits = 0,
                            Name = "Bangladeshi Taka",
                            NativeSymbol = "৳",
                            PluralName = "Bangladeshi takas",
                            Rounding = 0m,
                            Symbol = "Tk"
                        },
                        new
                        {
                            Code = "BGN",
                            DecimalDigits = 0,
                            Name = "Bulgarian Lev",
                            NativeSymbol = "лв.",
                            PluralName = "Bulgarian leva",
                            Rounding = 0m,
                            Symbol = "BGN"
                        },
                        new
                        {
                            Code = "BHD",
                            DecimalDigits = 0,
                            Name = "Bahraini Dinar",
                            NativeSymbol = "د.ب.‏",
                            PluralName = "Bahraini dinars",
                            Rounding = 0m,
                            Symbol = "BD"
                        },
                        new
                        {
                            Code = "BIF",
                            DecimalDigits = 0,
                            Name = "Burundian Franc",
                            NativeSymbol = "FBu",
                            PluralName = "Burundian francs",
                            Rounding = 0m,
                            Symbol = "FBu"
                        },
                        new
                        {
                            Code = "BND",
                            DecimalDigits = 0,
                            Name = "Brunei Dollar",
                            NativeSymbol = "$",
                            PluralName = "Brunei dollars",
                            Rounding = 0m,
                            Symbol = "BN$"
                        },
                        new
                        {
                            Code = "BOB",
                            DecimalDigits = 0,
                            Name = "Bolivian Boliviano",
                            NativeSymbol = "Bs",
                            PluralName = "Bolivian bolivianos",
                            Rounding = 0m,
                            Symbol = "Bs"
                        },
                        new
                        {
                            Code = "BRL",
                            DecimalDigits = 0,
                            Name = "Brazilian Real",
                            NativeSymbol = "R$",
                            PluralName = "Brazilian reals",
                            Rounding = 0m,
                            Symbol = "R$"
                        },
                        new
                        {
                            Code = "BWP",
                            DecimalDigits = 0,
                            Name = "Botswanan Pula",
                            NativeSymbol = "P",
                            PluralName = "Botswanan pulas",
                            Rounding = 0m,
                            Symbol = "BWP"
                        },
                        new
                        {
                            Code = "BYR",
                            DecimalDigits = 0,
                            Name = "Belarusian Ruble",
                            NativeSymbol = "BYR",
                            PluralName = "Belarusian rubles",
                            Rounding = 0m,
                            Symbol = "BYR"
                        },
                        new
                        {
                            Code = "BZD",
                            DecimalDigits = 0,
                            Name = "Belize Dollar",
                            NativeSymbol = "$",
                            PluralName = "Belize dollars",
                            Rounding = 0m,
                            Symbol = "BZ$"
                        },
                        new
                        {
                            Code = "CDF",
                            DecimalDigits = 0,
                            Name = "Congolese Franc",
                            NativeSymbol = "FrCD",
                            PluralName = "Congolese francs",
                            Rounding = 0m,
                            Symbol = "CDF"
                        },
                        new
                        {
                            Code = "CHF",
                            DecimalDigits = 0,
                            Name = "Swiss Franc",
                            NativeSymbol = "CHF",
                            PluralName = "Swiss francs",
                            Rounding = 0.05m,
                            Symbol = "CHF"
                        },
                        new
                        {
                            Code = "CLP",
                            DecimalDigits = 0,
                            Name = "Chilean Peso",
                            NativeSymbol = "$",
                            PluralName = "Chilean pesos",
                            Rounding = 0m,
                            Symbol = "CL$"
                        },
                        new
                        {
                            Code = "CNY",
                            DecimalDigits = 0,
                            Name = "Chinese Yuan",
                            NativeSymbol = "CN¥",
                            PluralName = "Chinese yuan",
                            Rounding = 0m,
                            Symbol = "CN¥"
                        },
                        new
                        {
                            Code = "COP",
                            DecimalDigits = 0,
                            Name = "Colombian Peso",
                            NativeSymbol = "$",
                            PluralName = "Colombian pesos",
                            Rounding = 0m,
                            Symbol = "CO$"
                        },
                        new
                        {
                            Code = "CRC",
                            DecimalDigits = 0,
                            Name = "Costa Rican Colón",
                            NativeSymbol = "₡",
                            PluralName = "Costa Rican colóns",
                            Rounding = 0m,
                            Symbol = "₡"
                        },
                        new
                        {
                            Code = "CVE",
                            DecimalDigits = 0,
                            Name = "Cape Verdean Escudo",
                            NativeSymbol = "CV$",
                            PluralName = "Cape Verdean escudos",
                            Rounding = 0m,
                            Symbol = "CV$"
                        },
                        new
                        {
                            Code = "CZK",
                            DecimalDigits = 0,
                            Name = "Czech Republic Koruna",
                            NativeSymbol = "Kč",
                            PluralName = "Czech Republic korunas",
                            Rounding = 0m,
                            Symbol = "Kč"
                        },
                        new
                        {
                            Code = "DJF",
                            DecimalDigits = 0,
                            Name = "Djiboutian Franc",
                            NativeSymbol = "Fdj",
                            PluralName = "Djiboutian francs",
                            Rounding = 0m,
                            Symbol = "Fdj"
                        },
                        new
                        {
                            Code = "DKK",
                            DecimalDigits = 0,
                            Name = "Danish Krone",
                            NativeSymbol = "kr",
                            PluralName = "Danish kroner",
                            Rounding = 0m,
                            Symbol = "Dkr"
                        },
                        new
                        {
                            Code = "DOP",
                            DecimalDigits = 0,
                            Name = "Dominican Peso",
                            NativeSymbol = "RD$",
                            PluralName = "Dominican pesos",
                            Rounding = 0m,
                            Symbol = "RD$"
                        },
                        new
                        {
                            Code = "DZD",
                            DecimalDigits = 0,
                            Name = "Algerian Dinar",
                            NativeSymbol = "د.ج.‏",
                            PluralName = "Algerian dinars",
                            Rounding = 0m,
                            Symbol = "DA"
                        },
                        new
                        {
                            Code = "EEK",
                            DecimalDigits = 0,
                            Name = "Estonian Kroon",
                            NativeSymbol = "kr",
                            PluralName = "Estonian kroons",
                            Rounding = 0m,
                            Symbol = "Ekr"
                        },
                        new
                        {
                            Code = "EGP",
                            DecimalDigits = 0,
                            Name = "Egyptian Pound",
                            NativeSymbol = "ج.م.‏",
                            PluralName = "Egyptian pounds",
                            Rounding = 0m,
                            Symbol = "EGP"
                        },
                        new
                        {
                            Code = "ERN",
                            DecimalDigits = 0,
                            Name = "Eritrean Nakfa",
                            NativeSymbol = "Nfk",
                            PluralName = "Eritrean nakfas",
                            Rounding = 0m,
                            Symbol = "Nfk"
                        },
                        new
                        {
                            Code = "ETB",
                            DecimalDigits = 0,
                            Name = "Ethiopian Birr",
                            NativeSymbol = "Br",
                            PluralName = "Ethiopian birrs",
                            Rounding = 0m,
                            Symbol = "Br"
                        },
                        new
                        {
                            Code = "GBP",
                            DecimalDigits = 0,
                            Name = "British Pound Sterling",
                            NativeSymbol = "£",
                            PluralName = "British pounds sterling",
                            Rounding = 0m,
                            Symbol = "£"
                        },
                        new
                        {
                            Code = "GEL",
                            DecimalDigits = 0,
                            Name = "Georgian Lari",
                            NativeSymbol = "GEL",
                            PluralName = "Georgian laris",
                            Rounding = 0m,
                            Symbol = "GEL"
                        },
                        new
                        {
                            Code = "GHS",
                            DecimalDigits = 0,
                            Name = "Ghanaian Cedi",
                            NativeSymbol = "GH₵",
                            PluralName = "Ghanaian cedis",
                            Rounding = 0m,
                            Symbol = "GH₵"
                        },
                        new
                        {
                            Code = "GNF",
                            DecimalDigits = 0,
                            Name = "Guinean Franc",
                            NativeSymbol = "FG",
                            PluralName = "Guinean francs",
                            Rounding = 0m,
                            Symbol = "FG"
                        },
                        new
                        {
                            Code = "GTQ",
                            DecimalDigits = 0,
                            Name = "Guatemalan Quetzal",
                            NativeSymbol = "Q",
                            PluralName = "Guatemalan quetzals",
                            Rounding = 0m,
                            Symbol = "GTQ"
                        },
                        new
                        {
                            Code = "HKD",
                            DecimalDigits = 0,
                            Name = "Hong Kong Dollar",
                            NativeSymbol = "$",
                            PluralName = "Hong Kong dollars",
                            Rounding = 0m,
                            Symbol = "HK$"
                        },
                        new
                        {
                            Code = "HNL",
                            DecimalDigits = 0,
                            Name = "Honduran Lempira",
                            NativeSymbol = "L",
                            PluralName = "Honduran lempiras",
                            Rounding = 0m,
                            Symbol = "HNL"
                        },
                        new
                        {
                            Code = "HRK",
                            DecimalDigits = 0,
                            Name = "Croatian Kuna",
                            NativeSymbol = "kn",
                            PluralName = "Croatian kunas",
                            Rounding = 0m,
                            Symbol = "kn"
                        },
                        new
                        {
                            Code = "HUF",
                            DecimalDigits = 0,
                            Name = "Hungarian Forint",
                            NativeSymbol = "Ft",
                            PluralName = "Hungarian forints",
                            Rounding = 0m,
                            Symbol = "Ft"
                        },
                        new
                        {
                            Code = "IDR",
                            DecimalDigits = 0,
                            Name = "Indonesian Rupiah",
                            NativeSymbol = "Rp",
                            PluralName = "Indonesian rupiahs",
                            Rounding = 0m,
                            Symbol = "Rp"
                        },
                        new
                        {
                            Code = "ILS",
                            DecimalDigits = 0,
                            Name = "Israeli New Sheqel",
                            NativeSymbol = "₪",
                            PluralName = "Israeli new sheqels",
                            Rounding = 0m,
                            Symbol = "₪"
                        },
                        new
                        {
                            Code = "INR",
                            DecimalDigits = 0,
                            Name = "Indian Rupee",
                            NativeSymbol = "টকা",
                            PluralName = "Indian rupees",
                            Rounding = 0m,
                            Symbol = "Rs"
                        },
                        new
                        {
                            Code = "IQD",
                            DecimalDigits = 0,
                            Name = "Iraqi Dinar",
                            NativeSymbol = "د.ع.‏",
                            PluralName = "Iraqi dinars",
                            Rounding = 0m,
                            Symbol = "IQD"
                        },
                        new
                        {
                            Code = "IRR",
                            DecimalDigits = 0,
                            Name = "Iranian Rial",
                            NativeSymbol = "﷼",
                            PluralName = "Iranian rials",
                            Rounding = 0m,
                            Symbol = "IRR"
                        },
                        new
                        {
                            Code = "ISK",
                            DecimalDigits = 0,
                            Name = "Icelandic Króna",
                            NativeSymbol = "kr",
                            PluralName = "Icelandic krónur",
                            Rounding = 0m,
                            Symbol = "Ikr"
                        },
                        new
                        {
                            Code = "JMD",
                            DecimalDigits = 0,
                            Name = "Jamaican Dollar",
                            NativeSymbol = "$",
                            PluralName = "Jamaican dollars",
                            Rounding = 0m,
                            Symbol = "J$"
                        },
                        new
                        {
                            Code = "JOD",
                            DecimalDigits = 0,
                            Name = "Jordanian Dinar",
                            NativeSymbol = "د.أ.‏",
                            PluralName = "Jordanian dinars",
                            Rounding = 0m,
                            Symbol = "JD"
                        },
                        new
                        {
                            Code = "JPY",
                            DecimalDigits = 0,
                            Name = "Japanese Yen",
                            NativeSymbol = "￥",
                            PluralName = "Japanese yen",
                            Rounding = 0m,
                            Symbol = "¥"
                        },
                        new
                        {
                            Code = "KES",
                            DecimalDigits = 0,
                            Name = "Kenyan Shilling",
                            NativeSymbol = "Ksh",
                            PluralName = "Kenyan shillings",
                            Rounding = 0m,
                            Symbol = "Ksh"
                        },
                        new
                        {
                            Code = "KHR",
                            DecimalDigits = 0,
                            Name = "Cambodian Riel",
                            NativeSymbol = "៛",
                            PluralName = "Cambodian riels",
                            Rounding = 0m,
                            Symbol = "KHR"
                        },
                        new
                        {
                            Code = "KMF",
                            DecimalDigits = 0,
                            Name = "Comorian Franc",
                            NativeSymbol = "FC",
                            PluralName = "Comorian francs",
                            Rounding = 0m,
                            Symbol = "CF"
                        },
                        new
                        {
                            Code = "KRW",
                            DecimalDigits = 0,
                            Name = "South Korean Won",
                            NativeSymbol = "₩",
                            PluralName = "South Korean won",
                            Rounding = 0m,
                            Symbol = "₩"
                        },
                        new
                        {
                            Code = "KWD",
                            DecimalDigits = 0,
                            Name = "Kuwaiti Dinar",
                            NativeSymbol = "د.ك.‏",
                            PluralName = "Kuwaiti dinars",
                            Rounding = 0m,
                            Symbol = "KD"
                        },
                        new
                        {
                            Code = "KZT",
                            DecimalDigits = 0,
                            Name = "Kazakhstani Tenge",
                            NativeSymbol = "тңг.",
                            PluralName = "Kazakhstani tenges",
                            Rounding = 0m,
                            Symbol = "KZT"
                        },
                        new
                        {
                            Code = "LBP",
                            DecimalDigits = 0,
                            Name = "Lebanese Pound",
                            NativeSymbol = "ل.ل.‏",
                            PluralName = "Lebanese pounds",
                            Rounding = 0m,
                            Symbol = "LB£"
                        },
                        new
                        {
                            Code = "LKR",
                            DecimalDigits = 0,
                            Name = "Sri Lankan Rupee",
                            NativeSymbol = "SL Re",
                            PluralName = "Sri Lankan rupees",
                            Rounding = 0m,
                            Symbol = "SLRs"
                        },
                        new
                        {
                            Code = "LTL",
                            DecimalDigits = 0,
                            Name = "Lithuanian Litas",
                            NativeSymbol = "Lt",
                            PluralName = "Lithuanian litai",
                            Rounding = 0m,
                            Symbol = "Lt"
                        },
                        new
                        {
                            Code = "LVL",
                            DecimalDigits = 0,
                            Name = "Latvian Lats",
                            NativeSymbol = "Ls",
                            PluralName = "Latvian lati",
                            Rounding = 0m,
                            Symbol = "Ls"
                        },
                        new
                        {
                            Code = "LYD",
                            DecimalDigits = 0,
                            Name = "Libyan Dinar",
                            NativeSymbol = "د.ل.‏",
                            PluralName = "Libyan dinars",
                            Rounding = 0m,
                            Symbol = "LD"
                        },
                        new
                        {
                            Code = "MAD",
                            DecimalDigits = 0,
                            Name = "Moroccan Dirham",
                            NativeSymbol = "د.م.‏",
                            PluralName = "Moroccan dirhams",
                            Rounding = 0m,
                            Symbol = "MAD"
                        },
                        new
                        {
                            Code = "MDL",
                            DecimalDigits = 0,
                            Name = "Moldovan Leu",
                            NativeSymbol = "MDL",
                            PluralName = "Moldovan lei",
                            Rounding = 0m,
                            Symbol = "MDL"
                        },
                        new
                        {
                            Code = "MGA",
                            DecimalDigits = 0,
                            Name = "Malagasy Ariary",
                            NativeSymbol = "MGA",
                            PluralName = "Malagasy Ariaries",
                            Rounding = 0m,
                            Symbol = "MGA"
                        },
                        new
                        {
                            Code = "MKD",
                            DecimalDigits = 0,
                            Name = "Macedonian Denar",
                            NativeSymbol = "MKD",
                            PluralName = "Macedonian denari",
                            Rounding = 0m,
                            Symbol = "MKD"
                        },
                        new
                        {
                            Code = "MMK",
                            DecimalDigits = 0,
                            Name = "Myanma Kyat",
                            NativeSymbol = "K",
                            PluralName = "Myanma kyats",
                            Rounding = 0m,
                            Symbol = "MMK"
                        },
                        new
                        {
                            Code = "MOP",
                            DecimalDigits = 0,
                            Name = "Macanese Pataca",
                            NativeSymbol = "MOP$",
                            PluralName = "Macanese patacas",
                            Rounding = 0m,
                            Symbol = "MOP$"
                        },
                        new
                        {
                            Code = "MUR",
                            DecimalDigits = 0,
                            Name = "Mauritian Rupee",
                            NativeSymbol = "MURs",
                            PluralName = "Mauritian rupees",
                            Rounding = 0m,
                            Symbol = "MURs"
                        },
                        new
                        {
                            Code = "MXN",
                            DecimalDigits = 0,
                            Name = "Mexican Peso",
                            NativeSymbol = "$",
                            PluralName = "Mexican pesos",
                            Rounding = 0m,
                            Symbol = "MX$"
                        },
                        new
                        {
                            Code = "MYR",
                            DecimalDigits = 0,
                            Name = "Malaysian Ringgit",
                            NativeSymbol = "RM",
                            PluralName = "Malaysian ringgits",
                            Rounding = 0m,
                            Symbol = "RM"
                        },
                        new
                        {
                            Code = "MZN",
                            DecimalDigits = 0,
                            Name = "Mozambican Metical",
                            NativeSymbol = "MTn",
                            PluralName = "Mozambican meticals",
                            Rounding = 0m,
                            Symbol = "MTn"
                        },
                        new
                        {
                            Code = "NAD",
                            DecimalDigits = 0,
                            Name = "Namibian Dollar",
                            NativeSymbol = "N$",
                            PluralName = "Namibian dollars",
                            Rounding = 0m,
                            Symbol = "N$"
                        },
                        new
                        {
                            Code = "NGN",
                            DecimalDigits = 0,
                            Name = "Nigerian Naira",
                            NativeSymbol = "₦",
                            PluralName = "Nigerian nairas",
                            Rounding = 0m,
                            Symbol = "₦"
                        },
                        new
                        {
                            Code = "NIO",
                            DecimalDigits = 0,
                            Name = "Nicaraguan Córdoba",
                            NativeSymbol = "C$",
                            PluralName = "Nicaraguan córdobas",
                            Rounding = 0m,
                            Symbol = "C$"
                        },
                        new
                        {
                            Code = "NOK",
                            DecimalDigits = 0,
                            Name = "Norwegian Krone",
                            NativeSymbol = "kr",
                            PluralName = "Norwegian kroner",
                            Rounding = 0m,
                            Symbol = "Nkr"
                        },
                        new
                        {
                            Code = "NPR",
                            DecimalDigits = 0,
                            Name = "Nepalese Rupee",
                            NativeSymbol = "नेरू",
                            PluralName = "Nepalese rupees",
                            Rounding = 0m,
                            Symbol = "NPRs"
                        },
                        new
                        {
                            Code = "NZD",
                            DecimalDigits = 0,
                            Name = "New Zealand Dollar",
                            NativeSymbol = "$",
                            PluralName = "New Zealand dollars",
                            Rounding = 0m,
                            Symbol = "NZ$"
                        },
                        new
                        {
                            Code = "OMR",
                            DecimalDigits = 0,
                            Name = "Omani Rial",
                            NativeSymbol = "ر.ع.‏",
                            PluralName = "Omani rials",
                            Rounding = 0m,
                            Symbol = "OMR"
                        },
                        new
                        {
                            Code = "PAB",
                            DecimalDigits = 0,
                            Name = "Panamanian Balboa",
                            NativeSymbol = "B/.",
                            PluralName = "Panamanian balboas",
                            Rounding = 0m,
                            Symbol = "B/."
                        },
                        new
                        {
                            Code = "PEN",
                            DecimalDigits = 0,
                            Name = "Peruvian Nuevo Sol",
                            NativeSymbol = "S/.",
                            PluralName = "Peruvian nuevos soles",
                            Rounding = 0m,
                            Symbol = "S/."
                        },
                        new
                        {
                            Code = "PHP",
                            DecimalDigits = 0,
                            Name = "Philippine Peso",
                            NativeSymbol = "₱",
                            PluralName = "Philippine pesos",
                            Rounding = 0m,
                            Symbol = "₱"
                        },
                        new
                        {
                            Code = "PKR",
                            DecimalDigits = 0,
                            Name = "Pakistani Rupee",
                            NativeSymbol = "₨",
                            PluralName = "Pakistani rupees",
                            Rounding = 0m,
                            Symbol = "PKRs"
                        },
                        new
                        {
                            Code = "PLN",
                            DecimalDigits = 0,
                            Name = "Polish Zloty",
                            NativeSymbol = "zł",
                            PluralName = "Polish zlotys",
                            Rounding = 0m,
                            Symbol = "zł"
                        },
                        new
                        {
                            Code = "PYG",
                            DecimalDigits = 0,
                            Name = "Paraguayan Guarani",
                            NativeSymbol = "₲",
                            PluralName = "Paraguayan guaranis",
                            Rounding = 0m,
                            Symbol = "₲"
                        },
                        new
                        {
                            Code = "QAR",
                            DecimalDigits = 0,
                            Name = "Qatari Rial",
                            NativeSymbol = "ر.ق.‏",
                            PluralName = "Qatari rials",
                            Rounding = 0m,
                            Symbol = "QR"
                        },
                        new
                        {
                            Code = "RON",
                            DecimalDigits = 0,
                            Name = "Romanian Leu",
                            NativeSymbol = "RON",
                            PluralName = "Romanian lei",
                            Rounding = 0m,
                            Symbol = "RON"
                        },
                        new
                        {
                            Code = "RSD",
                            DecimalDigits = 0,
                            Name = "Serbian Dinar",
                            NativeSymbol = "дин.",
                            PluralName = "Serbian dinars",
                            Rounding = 0m,
                            Symbol = "din."
                        },
                        new
                        {
                            Code = "RUB",
                            DecimalDigits = 0,
                            Name = "Russian Ruble",
                            NativeSymbol = "руб.",
                            PluralName = "Russian rubles",
                            Rounding = 0m,
                            Symbol = "RUB"
                        },
                        new
                        {
                            Code = "RWF",
                            DecimalDigits = 0,
                            Name = "Rwandan Franc",
                            NativeSymbol = "FR",
                            PluralName = "Rwandan francs",
                            Rounding = 0m,
                            Symbol = "RWF"
                        },
                        new
                        {
                            Code = "SAR",
                            DecimalDigits = 0,
                            Name = "Saudi Riyal",
                            NativeSymbol = "ر.س.‏",
                            PluralName = "Saudi riyals",
                            Rounding = 0m,
                            Symbol = "SR"
                        },
                        new
                        {
                            Code = "SDG",
                            DecimalDigits = 0,
                            Name = "Sudanese Pound",
                            NativeSymbol = "SDG",
                            PluralName = "Sudanese pounds",
                            Rounding = 0m,
                            Symbol = "SDG"
                        },
                        new
                        {
                            Code = "SEK",
                            DecimalDigits = 0,
                            Name = "Swedish Krona",
                            NativeSymbol = "kr",
                            PluralName = "Swedish kronor",
                            Rounding = 0m,
                            Symbol = "Skr"
                        },
                        new
                        {
                            Code = "SGD",
                            DecimalDigits = 0,
                            Name = "Singapore Dollar",
                            NativeSymbol = "$",
                            PluralName = "Singapore dollars",
                            Rounding = 0m,
                            Symbol = "S$"
                        },
                        new
                        {
                            Code = "SOS",
                            DecimalDigits = 0,
                            Name = "Somali Shilling",
                            NativeSymbol = "Ssh",
                            PluralName = "Somali shillings",
                            Rounding = 0m,
                            Symbol = "Ssh"
                        },
                        new
                        {
                            Code = "SYP",
                            DecimalDigits = 0,
                            Name = "Syrian Pound",
                            NativeSymbol = "ل.س.‏",
                            PluralName = "Syrian pounds",
                            Rounding = 0m,
                            Symbol = "SY£"
                        },
                        new
                        {
                            Code = "THB",
                            DecimalDigits = 0,
                            Name = "Thai Baht",
                            NativeSymbol = "฿",
                            PluralName = "Thai baht",
                            Rounding = 0m,
                            Symbol = "฿"
                        },
                        new
                        {
                            Code = "TND",
                            DecimalDigits = 0,
                            Name = "Tunisian Dinar",
                            NativeSymbol = "د.ت.‏",
                            PluralName = "Tunisian dinars",
                            Rounding = 0m,
                            Symbol = "DT"
                        },
                        new
                        {
                            Code = "TOP",
                            DecimalDigits = 0,
                            Name = "Tongan Paʻanga",
                            NativeSymbol = "T$",
                            PluralName = "Tongan paʻanga",
                            Rounding = 0m,
                            Symbol = "T$"
                        },
                        new
                        {
                            Code = "TRY",
                            DecimalDigits = 0,
                            Name = "Turkish Lira",
                            NativeSymbol = "TL",
                            PluralName = "Turkish Lira",
                            Rounding = 0m,
                            Symbol = "TL"
                        },
                        new
                        {
                            Code = "TTD",
                            DecimalDigits = 0,
                            Name = "Trinidad and Tobago Dollar",
                            NativeSymbol = "$",
                            PluralName = "Trinidad and Tobago dollars",
                            Rounding = 0m,
                            Symbol = "TT$"
                        },
                        new
                        {
                            Code = "TWD",
                            DecimalDigits = 0,
                            Name = "New Taiwan Dollar",
                            NativeSymbol = "NT$",
                            PluralName = "New Taiwan dollars",
                            Rounding = 0m,
                            Symbol = "NT$"
                        },
                        new
                        {
                            Code = "TZS",
                            DecimalDigits = 0,
                            Name = "Tanzanian Shilling",
                            NativeSymbol = "TSh",
                            PluralName = "Tanzanian shillings",
                            Rounding = 0m,
                            Symbol = "TSh"
                        },
                        new
                        {
                            Code = "UAH",
                            DecimalDigits = 0,
                            Name = "Ukrainian Hryvnia",
                            NativeSymbol = "₴",
                            PluralName = "Ukrainian hryvnias",
                            Rounding = 0m,
                            Symbol = "₴"
                        },
                        new
                        {
                            Code = "UGX",
                            DecimalDigits = 0,
                            Name = "Ugandan Shilling",
                            NativeSymbol = "USh",
                            PluralName = "Ugandan shillings",
                            Rounding = 0m,
                            Symbol = "USh"
                        },
                        new
                        {
                            Code = "UYU",
                            DecimalDigits = 0,
                            Name = "Uruguayan Peso",
                            NativeSymbol = "$",
                            PluralName = "Uruguayan pesos",
                            Rounding = 0m,
                            Symbol = "$U"
                        },
                        new
                        {
                            Code = "UZS",
                            DecimalDigits = 0,
                            Name = "Uzbekistan Som",
                            NativeSymbol = "UZS",
                            PluralName = "Uzbekistan som",
                            Rounding = 0m,
                            Symbol = "UZS"
                        },
                        new
                        {
                            Code = "VEF",
                            DecimalDigits = 0,
                            Name = "Venezuelan Bolívar",
                            NativeSymbol = "Bs.F.",
                            PluralName = "Venezuelan bolívars",
                            Rounding = 0m,
                            Symbol = "Bs.F."
                        },
                        new
                        {
                            Code = "VND",
                            DecimalDigits = 0,
                            Name = "Vietnamese Dong",
                            NativeSymbol = "₫",
                            PluralName = "Vietnamese dong",
                            Rounding = 0m,
                            Symbol = "₫"
                        },
                        new
                        {
                            Code = "XAF",
                            DecimalDigits = 0,
                            Name = "CFA Franc BEAC",
                            NativeSymbol = "FCFA",
                            PluralName = "CFA francs BEAC",
                            Rounding = 0m,
                            Symbol = "FCFA"
                        },
                        new
                        {
                            Code = "XOF",
                            DecimalDigits = 0,
                            Name = "CFA Franc BCEAO",
                            NativeSymbol = "CFA",
                            PluralName = "CFA francs BCEAO",
                            Rounding = 0m,
                            Symbol = "CFA"
                        },
                        new
                        {
                            Code = "YER",
                            DecimalDigits = 0,
                            Name = "Yemeni Rial",
                            NativeSymbol = "ر.ي.‏",
                            PluralName = "Yemeni rials",
                            Rounding = 0m,
                            Symbol = "YR"
                        },
                        new
                        {
                            Code = "ZAR",
                            DecimalDigits = 0,
                            Name = "South African Rand",
                            NativeSymbol = "R",
                            PluralName = "South African rand",
                            Rounding = 0m,
                            Symbol = "R"
                        },
                        new
                        {
                            Code = "ZMK",
                            DecimalDigits = 0,
                            Name = "Zambian Kwacha",
                            NativeSymbol = "ZK",
                            PluralName = "Zambian kwachas",
                            Rounding = 0m,
                            Symbol = "ZK"
                        });
                });

            modelBuilder.Entity("GR.Crm.Abstractions.Models.JobPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("JobPositions");
                });

            modelBuilder.Entity("GR.Crm.Contracts.Abstractions.Models.ContractSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<Guid>("ContractTemplateId");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Order");

                    b.Property<string>("TemplateValue");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ContractTemplateId");

                    b.ToTable("ContractSections");
                });

            modelBuilder.Entity("GR.Crm.Contracts.Abstractions.Models.ContractTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("ContractTemplates");
                });

            modelBuilder.Entity("GR.Crm.Leads.Abstractions.Models.Agreement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<decimal>("Commission");

                    b.Property<Guid>("ContactId");

                    b.Property<Guid>("ContractTemplateId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("LeadId");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("OrganizationAddressId");

                    b.Property<Guid>("OrganizationId");

                    b.Property<Guid>("ProductId");

                    b.Property<Guid?>("TenantId");

                    b.Property<Guid>("UserId");

                    b.Property<decimal>("Values");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("LeadId");

                    b.HasIndex("OrganizationAddressId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProductId");

                    b.ToTable("Agreements");
                });

            modelBuilder.Entity("GR.Crm.Leads.Abstractions.Models.Lead", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CurrencyCode");

                    b.Property<DateTime?>("DeadLine");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("LeadStateId");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<Guid>("OrganizationId");

                    b.Property<Guid>("PipeLineId");

                    b.Property<Guid?>("ProductId");

                    b.Property<DateTime?>("StageDeadLine");

                    b.Property<Guid>("StageId");

                    b.Property<DateTime>("StartDate");

                    b.Property<Guid?>("TeamId");

                    b.Property<Guid?>("TenantId");

                    b.Property<decimal>("Value");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("LeadStateId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PipeLineId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StageId");

                    b.HasIndex("TeamId");

                    b.ToTable("Leads");
                });

            modelBuilder.Entity("GR.Crm.Leads.Abstractions.Models.LeadState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Order");

                    b.Property<string>("StateStyleClass");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("GR.Crm.Leads.Abstractions.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<string>("BankAccount")
                        .IsRequired();

                    b.Property<DateTime>("Changed");

                    b.Property<decimal>("Commission");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<decimal>("Price");

                    b.Property<string>("Sku");

                    b.Property<Guid?>("TenantId");

                    b.Property<string>("Vat");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("GR.Crm.Organizations.Abstractions.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("RegionId")
                        .IsRequired();

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("GR.Crm.Organizations.Abstractions.Models.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("JobPositionId");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("OrganizationId");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("JobPositionId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("GR.Crm.Organizations.Abstractions.Models.ContactWebProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<Guid>("ContactId");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid?>("TenantId");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Version");

                    b.Property<Guid>("WebProfileId");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("WebProfileId");

                    b.ToTable("ContactWebProfiles");
                });

            modelBuilder.Entity("GR.Crm.Organizations.Abstractions.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Interval")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("GR.Crm.Organizations.Abstractions.Models.Industry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("Industries");
                });

            modelBuilder.Entity("GR.Crm.Organizations.Abstractions.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Afiliat")
                        .HasMaxLength(128);

                    b.Property<string>("Author");

                    b.Property<string>("Bank");

                    b.Property<string>("Brand")
                        .HasMaxLength(128);

                    b.Property<DateTime>("Changed");

                    b.Property<int>("ClientType");

                    b.Property<string>("CodSwift");

                    b.Property<string>("CodTva");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Employees");

                    b.Property<string>("FiscalCode")
                        .IsRequired()
                        .HasMaxLength(13);

                    b.Property<int>("GeoPosition");

                    b.Property<string>("IBANCode")
                        .HasMaxLength(128);

                    b.Property<Guid?>("IndustryId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.Property<string>("WebSite")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("GR.Crm.Organizations.Abstractions.Models.OrganizationAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<Guid>("CityId");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("OrganizationId");

                    b.Property<string>("Street")
                        .HasMaxLength(128);

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.Property<string>("Zip")
                        .HasMaxLength(28);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationAddresses");
                });

            modelBuilder.Entity("GR.Crm.Organizations.Abstractions.Models.OrganizationWorkCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("OrganizationId");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.Property<Guid>("WorkCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("WorkCategoryId");

                    b.ToTable("OrganizationWorkCategories");
                });

            modelBuilder.Entity("GR.Crm.Organizations.Abstractions.Models.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<int>("GeoPosition");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("GR.Crm.Organizations.Abstractions.Models.WebProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<byte[]>("Icon");

                    b.Property<string>("IconName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("TenantId");

                    b.Property<string>("Url")
                        .HasMaxLength(50);

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("WebProfiles");
                });

            modelBuilder.Entity("GR.Crm.Organizations.Abstractions.Models.WorkCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("WorkCategories");
                });

            modelBuilder.Entity("GR.Crm.Payments.Abstractions.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("Author");

                    b.Property<string>("BankAccount");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Currency");

                    b.Property<DateTime>("DateTransaction");

                    b.Property<string>("DocumentNumber");

                    b.Property<string>("FiscalCode")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("PaymentDestination");

                    b.Property<Guid?>("TenantId");

                    b.Property<decimal>("TotalAmount");

                    b.Property<decimal>("Vat");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("GR.Crm.Payments.Abstractions.Models.PaymentMapped", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid?>("OrganizationId");

                    b.Property<Guid?>("PaymentId");

                    b.Property<Guid>("ProductId");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ProductId");

                    b.ToTable("PaymentMappers");
                });

            modelBuilder.Entity("GR.Crm.PipeLines.Abstractions.Models.PipeLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.Property<Guid?>("WorkFlowId");

                    b.HasKey("Id");

                    b.ToTable("PipeLines");
                });

            modelBuilder.Entity("GR.Crm.PipeLines.Abstractions.Models.Stage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Order");

                    b.Property<Guid>("PipeLineId");

                    b.Property<Guid?>("TenantId");

                    b.Property<int?>("Term");

                    b.Property<int>("Version");

                    b.Property<Guid?>("WorkFlowStateId");

                    b.HasKey("Id");

                    b.HasIndex("PipeLineId");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("GR.Crm.Teams.Abstractions.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("GR.Crm.Teams.Abstractions.Models.TeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("TeamId");

                    b.Property<Guid?>("TeamRoleId")
                        .IsRequired();

                    b.Property<Guid?>("TenantId");

                    b.Property<Guid>("UserId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamRoleId");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("GR.Crm.Teams.Abstractions.Models.TeamRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("TeamRoles");
                });

            modelBuilder.Entity("GR.Audit.Abstractions.Models.TrackAuditDetails", b =>
                {
                    b.HasOne("GR.Audit.Abstractions.Models.TrackAudit")
                        .WithMany("AuditDetailses")
                        .HasForeignKey("TrackAuditId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GR.Crm.Contracts.Abstractions.Models.ContractSection", b =>
                {
                    b.HasOne("GR.Crm.Contracts.Abstractions.Models.ContractTemplate", "ContractTemplate")
                        .WithMany("Sections")
                        .HasForeignKey("ContractTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GR.Crm.Leads.Abstractions.Models.Agreement", b =>
                {
                    b.HasOne("GR.Crm.Organizations.Abstractions.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GR.Crm.Leads.Abstractions.Models.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GR.Crm.Organizations.Abstractions.Models.OrganizationAddress", "OrganizationAddress")
                        .WithMany()
                        .HasForeignKey("OrganizationAddressId");

                    b.HasOne("GR.Crm.Organizations.Abstractions.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GR.Crm.Leads.Abstractions.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GR.Crm.Leads.Abstractions.Models.Lead", b =>
                {
                    b.HasOne("GR.Crm.Abstractions.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyCode");

                    b.HasOne("GR.Crm.Leads.Abstractions.Models.LeadState", "LeadState")
                        .WithMany()
                        .HasForeignKey("LeadStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GR.Crm.Organizations.Abstractions.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GR.Crm.PipeLines.Abstractions.Models.PipeLine", "PipeLine")
                        .WithMany()
                        .HasForeignKey("PipeLineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GR.Crm.Leads.Abstractions.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("GR.Crm.PipeLines.Abstractions.Models.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GR.Crm.Teams.Abstractions.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("GR.Crm.Organizations.Abstractions.Models.City", b =>
                {
                    b.HasOne("GR.Crm.Organizations.Abstractions.Models.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GR.Crm.Organizations.Abstractions.Models.Contact", b =>
                {
                    b.HasOne("GR.Crm.Abstractions.Models.JobPosition", "JobPosition")
                        .WithMany()
                        .HasForeignKey("JobPositionId");

                    b.HasOne("GR.Crm.Organizations.Abstractions.Models.Organization", "Organization")
                        .WithMany("Contacts")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GR.Crm.Organizations.Abstractions.Models.ContactWebProfile", b =>
                {
                    b.HasOne("GR.Crm.Organizations.Abstractions.Models.Contact", "Contact")
                        .WithMany("ContactWebProfiles")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GR.Crm.Organizations.Abstractions.Models.WebProfile", "WebProfile")
                        .WithMany()
                        .HasForeignKey("WebProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GR.Crm.Organizations.Abstractions.Models.Organization", b =>
                {
                    b.HasOne("GR.Crm.Organizations.Abstractions.Models.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId");
                });

            modelBuilder.Entity("GR.Crm.Organizations.Abstractions.Models.OrganizationAddress", b =>
                {
                    b.HasOne("GR.Crm.Organizations.Abstractions.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GR.Crm.Organizations.Abstractions.Models.Organization", "Organization")
                        .WithMany("Addresses")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GR.Crm.Organizations.Abstractions.Models.OrganizationWorkCategory", b =>
                {
                    b.HasOne("GR.Crm.Organizations.Abstractions.Models.Organization")
                        .WithMany("OrganizationWorkCategories")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GR.Crm.Organizations.Abstractions.Models.WorkCategory", "WorkCategory")
                        .WithMany()
                        .HasForeignKey("WorkCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GR.Crm.Payments.Abstractions.Models.PaymentMapped", b =>
                {
                    b.HasOne("GR.Crm.Organizations.Abstractions.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("GR.Crm.Payments.Abstractions.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId");

                    b.HasOne("GR.Crm.Leads.Abstractions.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GR.Crm.PipeLines.Abstractions.Models.Stage", b =>
                {
                    b.HasOne("GR.Crm.PipeLines.Abstractions.Models.PipeLine", "PipeLine")
                        .WithMany("Stages")
                        .HasForeignKey("PipeLineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GR.Crm.Teams.Abstractions.Models.TeamMember", b =>
                {
                    b.HasOne("GR.Crm.Teams.Abstractions.Models.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GR.Crm.Teams.Abstractions.Models.TeamRole", "TeamRole")
                        .WithMany()
                        .HasForeignKey("TeamRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
