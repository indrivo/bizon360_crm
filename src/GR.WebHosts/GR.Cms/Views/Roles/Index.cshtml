@{
	ViewData["Title"] = "Roles";
}

<MetadataPage />

@section Scripts
{
	<script src="~/themes/gear/js/components/pageOptionsbar.js"></script>
	<script src="~/themes/gear/js/components/table/table.js"></script>
	<script src="~/themes/gear/js/components/modal.js"></script>
	<script src="~/themes/gear/js/components/form-controls/textarea.js"></script>
	<script src="~/themes/gear/js/components/form-controls/datepicker.js"></script>
	<script src="~/themes/gear/js/components/form-controls/input.js"></script>
	<script src="~/themes/gear/js/components/form-controls/file.js"></script>
	<script src="~/themes/gear/js/components/form-controls/select.js"></script>
	<script type="text/x-template" id="roles-template">
		<div>
			<PageOptionsBar :searcheable="true" :pageOptionsComponents="pageOptionsComponents" @@searchInput="searchTable" />
			<div>
				<Table v-if="dataLoad"
					   :fields="tableFields"
					   :apiUrl="apiUrl"
					   :httpMethod="httpMethod"
					   @@triggeredMenuAction="action"
					   tableId="workCategories-table"
					   :customQueryparams="customQueryparams"
					   :hasCustomQUeryparams="true"
					   :initialPageSize="20"
					   :reload="tableKey"
					   :sortOrder="tableConfig.sortCol"
					   dataPath="result.result"
					   :actionsSingle="tableActions.single"
					   :actionsSingleDisabled="tableActions.singleDisabled"
					   :actionsMultiple="tableActions.multiple"
					   :actionsMultipleDisabled="tableActions.multipleDisabled"
					   :haveContextMenu="true">
				</Table>
			</div>
			<Modal :refreshInputs="refreshInputs" :modalProps="modalProps" @@newValue="emitModalValue" :inputsKey="modalKey"/>
		</div>
	</script>
	<script>
		Vue.component('MetadataPage', {
			template: '#roles-template',
			data() {
				return {
					modalKey: 0,
					apiUrl: apiEndpoints.Roles.GetAllPaginatedRoles,
					httpMethod: 'get',
					dataLoad: false,
					permissions: [],
					modalValues: {},
					pageOptionsComponents: [
						{
							name: 'Button',
							props: {
								label: 'Add role',
								btnType: 'success',
								className: 'ml-auto',
								onClick: () => {
									this.editableModal = false;
									this.resetModalValues();
									this.modalKey++;
									$(`#${this.modalProps.id}`).modal("show");
								}
							}
						}
					],
					tableActions: {
						single: {
							"edit": { name: "Edit", icon: "edit" },
							"deactivate": { name: "Deactivate", icon: "eye-off" }
						},
						singleDisabled: {
							"activate": { name: "Activate", icon: "eye" },
							"delete": { name: "Delete permanently", icon: "delete" }
						},
						multiple: {
							"deactivate": { name: "Deactivate", icon: "eye-off" }
						},
						multipleDisabled: {
							"activate": { name: "Activate", icon: "eye" },
							"delete": { name: "Delete permanently", icon: "delete" }
						}
					},
					tableKey: 0,
					waitAddButton: false,
					editableModal: false,
					refreshInputs: 0,
					searchString: '',
					tableFields: [
						{
							name: 'name',
							title: 'Name',
							visible: true,
							sortField: 'name'
						},
						{
							name: 'created',
							title: 'Date created',
							visible: true,
							sortField: 'created'
						},
						{
							name: 'author',
							title: 'Created by',
							visible: true,
							sortField: 'author'
						},
						{
							name: 'changed',
							title: 'Date changed',
							visible: true,
							sortField: 'changed'
						},
						{
							name: 'modifiedBy',
							title: 'Changed by',
							visible: true,
							sortField: 'modifiedBy'
						},
						{
							name: 'isDeleted',
							title: 'Status',
							visible: true,
							sortField: 'isDeleted'
						}
					],
					tableConfig: {
						currentPage: 0,
						pageSize: 20,
						rowCount: 0,
						sortCol: [
							{
								field: 'name',
								sortField: 'name',
								direction: 'asc'
							}
						]
					}
				}
			},
			computed: {
				customQueryparams() {
					return {
						'includeDeleted': true,
						'gSearch': this.searchString
					}
				},
				modalProps() {
					return {
						id: 'roleModal',
						label: this.editableModal ? 'Edit role' : 'Add role',
						formInputs: [
							{
								name: 'Input',
								props: {
									id: 'entity-title',
									type: 'text',
									label: 'Title',
									required: true,
									className: 'col-12',
									value: this.modalValues.title,
									validator: value => fieldValidationFunc(value, 'name'),
									validatorInput: value => fieldValidationInputFunc(value, 'name')
								}
							},
							{
								name: 'Input',
								props: {
									id: 'entity-name',
									type: 'text',
									label: 'Name',
									required: true,
									className: 'col-12 col-md-6',
									value: this.modalValues.name,
									validator: value => fieldValidationFunc(value, 'name'),
									validatorInput: value => fieldValidationInputFunc(value, 'name')
								}
							},
							{
								name: 'Select',
								props: {
									id: 'entity-selectedPermissionId',
									label: 'Permissions',
									required: true,
									className: 'col-12 col-md-6',
									value: this.modalValues.selectedPermissionId,
									options: this.permissions,
									multiple: true,
									size: 10,
									searchable: true,
									validator: value => fieldValidationFunc(value, 'name'),
									validatorInput: value => fieldValidationInputFunc(value, 'name')
								}
							}
						],
						formSubmits: [
							{
								name: 'Button',
								props: {
									label: 'Cancel',
									btnType: 'outline-secondary',
									onClick: () => {
										$(`#${this.modalProps.id}`).modal("hide");
									}
								}
							},
							{
								name: 'Button',
								props: {
									label: 'Save',
									btnType: 'success',
									waiting: this.waitAddButton,
									btnDOMType: 'submit'
								}
							}
						],
						onSubmit: () => {
							if (!this.editableModal) {
								this.addNewEntity().then(() => {
									$(`#${this.modalProps.id}`).modal("hide");
								});
							} else {
								this.updateEntity().then(() => {
									$(`#${this.modalProps.id}`).modal("hide");
								});
							}
						}
					}
				},
			},
			created() {
				this.resetModalValues();
				customAjaxRequest(apiEndpoints.Roles.GetPermissionsByClientId, 'GET', { id: 1 }).then(result => {
					this.permissions = this.convertToSelectList(result);
					this.dataLoad = true;
				});
			},
			methods: {
				async addNewEntity() {
					this.waitAddButton = true;
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Roles.AddRole, 'PUT', this.modalValues).then(() => {
							this.tableKey++;
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						}).finally(() => {
							this.waitAddButton = false;
						});
					});
				},
				async updateEntity() {
					this.waitAddButton = true;
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Roles.EditRole, 'POST', this.modalValues).then(() => {
							this.tableKey++;
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						}).finally(() => {
							this.waitAddButton = false;
						});
					});
				},
				async deactivateEntities(array) {
					array.forEach((entityId, i, a) => {
						customAjaxRequest(apiEndpoints.Roles.DeactivateRole, 'POST', { id: entityId }).then(() => {
							if (i === a.length - 1) {
								this.tableKey++;
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				async activateEntities(array) {
					array.forEach((entityId, i, a) => {
						customAjaxRequest(apiEndpoints.Roles.ActivateRole, 'POST', { id: entityId }).then(() => {
							if (i === a.length - 1) {
								this.tableKey++;
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				async deleteEntities(array) {
					array.forEach((entityId, i, a) => {
						customAjaxRequest(apiEndpoints.Roles.DeleteRole, 'DELETE', { id: entityId }).then(() => {
							if (i === a.length - 1) {
								this.tableKey++;
							}
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				async loadEntity(entityId) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Roles.GetRolesById, 'GET', { roleId: entityId }).then(result => {
							resolve(result);
						}).catch(e => {
							toast.notifyErrorList(e);
						});
					});
				},
				editEntity(entityId) {
					this.loadEntity(entityId).then(result => {
						this.editableModal = true;
						this.modalValues = result;
						this.modalKey++;
						this.refreshInputs++;
						$(`#${this.modalProps.id}`).modal("show");
					});
				},
				resetModalValues() {
					this.modalValues = {
						name: null,
						title: null,
						clientId: 1,
						selectedPermissionId: []
					}
				},
				emitModalValue(val) {
					const newVal = val.value === 'true' ? true : val.value === 'false' ? false : val.value;
					this.modalValues[val.id.replace('entity-', '')] = newVal;
				},
				convertToSelectList(array) {
					return array.map(e => {
						const newObj = {
							label: e.text,
							value: e.value
						}
						return newObj;
					});
				},
				action(action) {
					switch (action.key) {
						case 'deactivate': {
							this.deactivateEntities(action.value);
							break;
						} case 'activate': {
							this.activateEntities(action.value);
							break;
						} case 'edit': {
							this.editEntity(action.value[0]);
							break;
						} case 'delete': {
							this.deleteEntities(action.value);
							break;
						}
					}
				},
				searchTable(val) {
					if (val.length > 2) {
						this.searchString = val;
						this.tableKey++;
					} else if (val === '') {
						this.searchString = '';
						this.tableKey++;
					}
				}
			}
		});

	</script>
}
